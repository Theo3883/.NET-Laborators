### Variables
@baseUrl = http://localhost:5021

### Create 1000 Books Script
# This will be run using a loop from terminal

### Test 1: Create a single book
POST {{baseUrl}}/books
Content-Type: application/json

{
  "title": "Test Book 1",
  "author": "Author 1",
  "year": 2020
}

### Test 2: Get all books (before pagination)
GET {{baseUrl}}/books-all

### Test 3: Get books with pagination - Page 1
GET {{baseUrl}}/books?page=1&pageSize=10

### Test 4: Get books with pagination - Page 2
GET {{baseUrl}}/books?page=2&pageSize=10

### Test 5: Get books with pagination - Page 50 (books 491-500)
GET {{baseUrl}}/books?page=50&pageSize=10

### Test 6: Get books with pagination - Large page size
GET {{baseUrl}}/books?page=1&pageSize=50

### Test 7: Get books with pagination - Last page
GET {{baseUrl}}/books?page=100&pageSize=10

### Test 8: Get books with default pagination (no params)
GET {{baseUrl}}/books

### Test 9: Get single book by ID
GET {{baseUrl}}/books/1

### Test 10: Update a book
PUT {{baseUrl}}/books/1
Content-Type: application/json

{
  "id": 1,
  "title": "Updated Book Title",
  "author": "Updated Author",
  "year": 2024
}

### Test 11: Delete a book
DELETE {{baseUrl}}/books/1

### Test 12: Try to get deleted book (should return 404)
GET {{baseUrl}}/books/1

### Test 13: Invalid pagination - page 0
GET {{baseUrl}}/books?page=0&pageSize=10

### Test 14: Invalid pagination - pageSize too large
GET {{baseUrl}}/books?page=1&pageSize=200

### Test 15: Invalid pagination - negative values
GET {{baseUrl}}/books?page=-1&pageSize=-10
